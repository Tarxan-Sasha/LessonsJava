package LessonsAboutExceptionAndError;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;

/*
 * Исключения - это непредвиденная ситуация, но с програмной стороны это обьект, который выбрасывает класс Исключения.
 * Все классы исключений наследуються от супер-класса Throwable.
 * 
 * (Именно Throwable выбрасывает строковое описание с большей информацией об ошибке, )
 * (а так же только его обьекты и обьекты его под-классов может выбросить JVM или мы оператором throw.)
 * 
 * Throwable имеет два дочерних класса, которые и делят непредвиденная ситуации на ошибки и исключения:
 * 1)Error - Обьекты этого класса можно назвать критическими ошибками. Возникновение такого рода исключений зачастую связананно с самой JVM.
 * Например когда закончилось место на жестком диске OutOfMemoryError.
 * Обычно програмист имеет мало возможностей обработать эти ошибки, или вовсе никаких.
 * 2)Exception - Обьекты этого класса уже можно назвать исключениями. Этот класс наследют другие два класса:
 * 	- RuntimeException - этот класс наследуют классы непроверяемых исключений(unchecked).
 * Непроверяемые(unchecked) исключения это ошибки о которых компилятор Не знает.
 * Компилятор не может знать обо всех возможных ошибок кода которые может допустить программист,
 * потому и предупреждать о них не будет.
 * Такие ошибки зачастую являються ошибками в коде, которые не обязательно нужно обрабатывать, нужно просто исправить код.
 *	- IOException - этот класс наследуют классы проверяемых исключений(checked).
 * Проверяемые(checked) исключения это ошибки о которых компилятор знает.
 * Компилятор предупредит о наличии такой в коде, если он её обнаружит, и попросит что то с ней сделать.
 * 
 * 	Обьект Исключения можно обработать с помощью try catch finnaly
 * 	1)try - С помощью этого ключевого слова мы выделяем участок кода где ожидаем искючение, или знаем о его наличии.
 * 	2)catch - Это ключевое слово идет сразу после блока try (как if else, только catch обязателен).
 *  В этом блоке мы обрабатываем само исключение, которое возникло в try.
 *  В условии указываем и передаем обьект класса исключения, который возник в try.
 *  А в теле уже пишем то что должно произойти в случае возникновения указанного исключения в условии.
 *  
 *  Можно указать несколько блоков catch с разными обьектами исключений в условиях.
 *  Java будет, как со switch, проходить по каждому условию сверяя исключение выброшенное в try 
 *  с искючюением в условии catch.
 *  Если написать блок catch в условии которого будет обьект исключения класса Exception,
 *  а следом написать блок catch в условии которого будет обьект исключения класса который являеться дочерним от Exception
 *  Тогда будет ошибка, потому что код во втором catch являетсья недостежимым, а в java - это ошибка
 *  
 *  Так же в java 7 добавили multi-catch блок
 *  Multi-catch блок - это обычный catch в словии которого указанно сразу несколько обьектов исключений через оператор "|"
 *   
 * 	3)finnaly - Это блок кода который идет после catch, и ВЫПОЛНЯЕТЬСЯ В ЛЮБОМ СЛУЧАЕ.
 * 	Сюда вписываеться то что должно быть выполненно независимо от обстоятельств, например закрытие потоков.
 */
public class LessonAboutTryCatchFinnaly {
	public static void main(String [] args){
		
		int [] array = {0, 1};
		try {
			for(int i=0; i<=array.length; i++) {
				System.out.println(array[i]);
			}	
		}
		catch(ArrayIndexOutOfBoundsException e) {
			System.out.println("Вышел из-за масива");
		}
		
		names();
		numbers();
	}

	//Метод с Проверяемым исключением
	public static void names() {
		try {
			FileReader fR = new FileReader("/Sasha/src/LessonsAboutExceptionAndError/Names.txt");
		}
		catch(FileNotFoundException | ArrayIndexOutOfBoundsException e) {
			System.out.println("Файла нет");
		}

	}
	
	//Метод с НЕ проверяемым исключением
	public static void numbers(){
		try {
			
			int [] array = {0,1,2,3,4,5};
			for(int i=0; i<=array.length; i++) {
				System.out.println(array[i]);
			}
			int y=array[2]/0;
		}
		catch(ArrayIndexOutOfBoundsException e) {
			System.out.println("Вышли за пределы массива");
		}
		catch(ArithmeticException e) {
			System.out.println("Поделил на 0");
		}
		finally{
			System.out.println("Выполнить в любом случае");
		}

	
		/*
		 * Эти два catch блока можно переписать используя Multi-catch:
		 * catch(ArrayIndexOutOfBoundsException | ArithmeticException e) {
		 *	System.out.println("Вышли за пределы массива или поделили на 0");
		 * }
		 * 
		 */
	
		
	}
	
}












