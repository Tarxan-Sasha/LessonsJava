package LessonsAboutMultithreading;

import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

/*
 * !НЕДОПИСАНО!
 * Со временем появляетсья множество маленьких задач которые требуется выполнить, 
 * но создавать отдельно под каждую задачу свой поток - это долго и дорого.
 * А бывает что создание потока длиться дольше чем сама операция ради которой он создаеться.
 * 
 * Для решения этой проблемы есть пул потоков.
 * Пул потоков - это контейнер/пучок/свзяка какого-то количества потоков которые создаються сами и выполняют очередь из поставленных задач,
 * как только одна задача будет выполнена поток перейдет к выполнению другой.
 * (Если сейчас не очень ясно, то я дальше распишу подробнее)
 * Так же пул потоков используеться для того что бы разделить обьект который выполняет код и сам код который нужно выполнить(что бы это не значило)
 * Пул потоков по сути оптимизирует работу с потоками, обеспечивая контроль над созданием потоков, а так же он экономит ресурсы когда их создает.
 * Ну и пул потоков в целом упростит разработку многопоточных приложений.
 *
 * Что в целом происходит, еще раз, в пуле мы создаем какое то количество потоков например 3, и даем им задачи на выполненние, этих задач у нас будет 4(например)
 * Потоки выполняют эти задачи автоматически, и как только поток выполнит задачу он перейдет к следующей в очереди. Что за очередь?
 * Потоков у нас 3, а задач 4. Каждый из потоков сразу возьметься за задачу и будет её выполнять, 
 * то есть первые 3 задачи будут выполняться в один момент, а вот последняя четвертая будет лежать в очереди и ждать когда какой-то поток не выполнит свою задачу 
 * и начнет выполнять её.
 * Когда все задачи будут выполнены, тогда все потоки из пула перейдут в спящий режим ожидая новой работы.
 * А что бы прекратить их существование нужно вызвать метод shutdown(), который запрещает принимать новые задачи, 
 * и как только потоки выполнят все оставшиеся(добавленные ранее до запрета) задачи они прекратят свое существование.
 * (К потокам в пуле потоков можно относиться как к бригаде рабочих)
 * 
 * За реализацию пула потоков отвечают классы и интерфейсы Executor Framework 
 * Executors - это класс
 * ExecutorService - интерфейс
 * Executor - интерфейс
 *
 */
public class LessonAboutThreadPool {

	public static void main(String[] args) {
		ExecutorService es = Executors.newFixedThreadPool(3);//Указываем количество потоков в нашем пуле
		for(int i=0; i<5; i++) {
			es.submit(new KillCaptive(i));//с помощью метода submit() добавляем задачу на выполнение
		}
		System.out.println("Палачи орков прибыли");
		es.shutdown();//Заверашем потоки
		System.out.println("Казнь началась");
	}

	
}
class KillCaptive implements Runnable{
	private int id;
	public KillCaptive(int id) {
		this.id=id;
	}
	@Override
	public void run() {
		try {
			Thread.sleep(2000);
			System.out.println("Был казнен пленник "+id);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
	
}