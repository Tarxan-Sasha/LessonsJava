package LessonsAboutStreamsIO;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.RandomAccessFile;

/*
 * RandomAccessFile - это поток с помощью которого можно и писать и читать с файла.
 * Но особенностью этого класса являеться то что мы можем указать с какого момента читать или писать.
 * 
 * RandomAccessFile работает с файлом воспринимая его как большой массив байтов, 
 * в котором у него есть указатель(точка откуда начинать работу).
 * Этот указатель изначально стоит на 0, но его можно изменить с помощью метода seek().
 * Благодаря этому потоку решаеться проблема когда нужно прочитать не весь файл, а именно то место которое необходимо
 * и не записывать в конец файла(или полностью перезаписывать файл), а указать и записать например в середину или в начало файла.
 * 
 * RandomAccessFile являеться потоком, но он не наследуеться ни от InputStream ни от OutputStream ,но имплементирует интерфейсы DataInput и DataOutput.
 * RandomAccessFile читает и записывает и байты и символы (символы он переводит в байты).
 * Все методы от InputStream и OutputStream у него есть, а так же от интерфейсов DataInput и DataOutput.
 * Из всех методов, можно остановиться на нескольких:
 * 1)void seek(long pos) - указывает место указателя откуда нужно начать работу(читать/записать). По сути визитная карточка всего класса.
 * 2)long length() - обычный метод который есть во всех массивах, а именно возвращает размер массива. 
 * Просто интересно что он тут есть, опять таки это потому что RandomAccessFile воспринимает/видит файл как массив, а потому и этот метод тут есть.
 * В целом, по сути этим потоком сложно пользоваться если не знать размер файла. Например, нельзя будет прочитать елемент 100, если элементов в файле меньше.
 * Грубо говоря, понятно что и почему этот метод тут делает, этот метод(я считаю) must have.
 * 3)void writeBytes(String s) - записывает строку в файл, переводя в байты.
 * В целом у RandomAccessFile много всяких методов для записи различных типов данных благодаря DataInput и DataOutput.
 * 4)void setLength(long newLength) - устанавливает новый размер файла, если он буедт меньше чем придыдущий, то вся информация которая не влезла обрежиться.
 * 5)long getFilePointer() - возвращает номер байта на который указывает указатель.
 * 
 * В конструтор RandomAccessFile нужно указать или путь к файлу или обьект класса File.
 * Но вторым параметром String нужно написать/указать вариант доступа, и вот их варианты:
 * 1) "r" - означает по-сути "read", файл доступен только для чтения. Запись в файл с таким доступом не возможна. 
 * 2) "rw" - означает по-сути "read write", файл доступен и для чтения и для записи.
 * 3) "rws" - тоже самое что и "rw", только все изменения содержимого файла и его метаданных (например, когда он был изменен в последний раз) тут же вступают в силу.
 * 4) "rwd" - тоже самое что и "rw", только все изменения содержимого файла БЕЗ метаданных тут же вступают в силу.
 * Отдельного доступа "w"(write) только для записи НЕТ.
 * 
 * RandomAccessFile можно закрывать с помощью close() и try-with-resources.
 * 
 */
public class LessonAboutRandomAccessFile {

	public static void main(String[] args) {
		File file = new File("src/LessonsAboutStreamsIO/Games.txt");
		//Констркуторы RandomAccessFile
		try(RandomAccessFile raf = new RandomAccessFile(file, "rw");//Принимает обьект класса File, а дальше требуеться указать в перемнной String вариант доступа к файлу
																	//Например тут "rw" -  тоесть и чтение и запись
			RandomAccessFile raf1 = new RandomAccessFile("src/LessonsAboutStreamsIO/Games.txt", "r")){//Принимет путь к файлу, а дальше указываем в перемнной String вариант доступа к файлу
																									  //Например тут "r" - только для чтения
			raf.writeBytes("StarCraft");//Записывает строчку в файл, этот метод сам переведет строку в байты для записи.
			/*
			 * Дальше если мы сразу захотим прочитать файл то выведеться null.
			 */
			System.out.println(raf.getFilePointer());//Благодаря этому методу мы увидим наглядно где сейчас указатель
			/* 
			 * Указатель стоит в конце слова, на 9 байте, дальше пустота.
			 * Потому пойдя туда для чтения выведеться null, ведь опять таки там нечего нет.
			 * 
			 * По этому что бы прочитать то что мы написали нужно переместить указатель потока, в начало(ну или туда куда нам надо)
			 */
			raf.seek(0);//Устанавливаем указатель потока в начало, на 0-ой байт. 
		   /*
		    * Теперь если мы захотим прочитать то выведеться то что нам нужно, а не null.
			* А если решим что то записать, тогда новое слово перезапишет все те байты которые ему потребуються по его размеру.
			* Ну то есть, если мы запишем слово StarCraft, а потом обнулим указатель до 0 и напишем слово Zerg, получиться:
			* ZergCraft
			* Потому что слово Zerg - 4 символа/бита/позиции, и поток первые 4 символа перезаписывает под новое слово.
			* Запишем с нулевой строчки Protoss, которое займет уже 7 символов, тогда поток и их перезапишет под новое слово и выдаст 
			* Protossft
			* Ну и так далее...
			*/
			if(raf.length()>0) {//Если размер файла больше 0, тогда можно читать.
			System.out.println(raf.readLine());//Читаем сразу строку
			}
			
			
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}

}
