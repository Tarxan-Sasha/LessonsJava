package LessonsAboutInnerClasses;
/*
 * Анонимный класс это класс без имени.
 * Он создаеться на один раз и тут же пропадает.
 * То есть он сразу обьявляетсья и инцилизиуреться.
 * 
 * Анонимный класс может не только переопределить методы, но и создать новые.
 * Но вызвать новые методы анонимного класса, за пределами анонимного класса нельзя.
 * 
 * Случаи использования анонимного класса:
 * 1)Тело класса являеться коротким
 * 2)Нужен только один экземпляр класса.
 * 3)Класс используется в месте его создания или сразу после него.
 * 4)Имя класса не важно и не облегчает понимание кода.
 * 
 * Анонимный может так же переопределять методы интерфейсов.
 * 
 */
public class Test extends Warrior{
	

	public static void main(String[] args) {

	/*
		////////////////////////////////////////////////////////////////////////
		//Внутрений статический класс
		Car car = new Car(true);
		car.closeWindow();
		//Car.Window window = new Car(false).new Window(); // Создание обьектов внутренего класса
		//Car.Window window1 = car.new Window(); // Создание обьектов внутренего класса


		////////////////////////////////////////////////////////////////////////
		//Вложенный статический класс
		Plane.Drawing drawing1 = new Plane.Drawing(); 
		//что бы обратиться к статическому внутреннему классу импользуем такой синтаксис
		
		
		/////////////////////////////////////////////////////////////
		//Работа Внешнего и Локального класса
		City city =new City();
		city.createAddress();
	*/
		

		///////////////////////////////////////////////////////////////////
		//Анонимный класс
		Test test =new Test() {//Мы просто открываем фигурную скобочку сразу после скобочек конструктора
			@Override
			public void battle() {//Переопределяем метод класса родителя
				System.out.println("Воин дереться решительно");
				dead();//Мы можем вызвыать новые методы лишь в Анонимном классе
			}
			
			public void dead() {
				System.out.println("Воин умерает");
			}
		};//После закрытия фигурных скобочек, надо поставить ;
		
		
		test.battle();
		//test.dead();//вызвать новый метод мы не можем, его можно использовать лишь в анонимном классе
		
		
		Moveable moveable = new Moveable() {//Создать обьект интерфейса нельзя, но если его методы реализовать в анонимном классе тогда можно 
			@Override
			public void move() {
				// TODO Auto-generated method stub
				
			}
		};
		
	}

}
